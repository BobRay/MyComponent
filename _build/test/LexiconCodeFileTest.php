<?php
/**
 *  NOTE: Pull BobRay:Example master branch from GitHub
 *  into assets/mycomponents/example/ before running
 */

/**
 * Test class for MyComponentProject Bootstrap.
 * Generated by PHPUnit on 2012-03-02 at 23:02:19.
 * @outputBuffering disabled
 */

class LexiconCodeFileTest extends PHPUnit_Framework_TestCase {

    /* @var $mc MyComponentProject */
    public $mc;
    /* @var $modx modX */
    public $modx;
    /* @var $utHelpers UtHelpers */
    public $utHelpers;
    /* @var $lcf LexiconCodeFile;
     * */
    public $lcf;
    /**
     * @var $root string - target root
     */
    public $rootDir;
    /**
     * @var $lexDir string - target lexicon directory
     */
    public $lexDir;
    /**
     * @var $coreDir string - target core directory
     */
    public $coreDir;
    /**
     * @var $modelDir string - target model directory
     */
    public $modelDir;

    /**
     * @var $jsDir string - target JS directory
     */
    public $jsDir;

    /**
     * @var $chunkDir string - target chunks directory
     */
    public $chunkDir;

    /** @var  $languages array */
    public $languages;




    protected function setUp() {
        require_once dirname(__FILE__) . '/build.config.php';
        require_once dirname(__FILE__) . '/uthelpers.class.php';
        require_once MODX_CORE_PATH . 'model/modx/modx.class.php';
        $this->utHelpers = new UtHelpers();
        $modx = new modX();
        $this->modx =& $modx;
        $modx->initialize('mgr');
        $modx->getService('error', 'error.modError', '', '');
        $modx->getService('lexicon', 'modLexicon');
        $modx->getRequest();
        $homeId = $modx->getOption('site_start');
        $homeResource = $modx->getObject('modResource', $homeId);

        if ($homeResource instanceof modResource) {
            $modx->resource = $homeResource;
        } else {
            echo "\nNo Resource\n";
        }

        $modx->setLogLevel(modX::LOG_LEVEL_ERROR);
        $modx->setLogTarget('ECHO');

        require_once MODX_ASSETS_PATH . 'mycomponents/mycomponent/core/components/mycomponent/model/mycomponent/mycomponentproject.class.php';

        /* @var $categoryObj modCategory */
        $this->mc = new MyComponentProject($modx);
        $this->mc->init(array(), 'example');

        $this->rootDir = strtolower($this->mc->targetRoot);
        $this->rootDir = str_replace('\\', '/', $this->rootDir);

        $this->coreDir = strtolower($this->mc->myPaths['targetCore']);
        $this->coreDir = str_replace('\\', '/', $this->coreDir);

        $this->lexDir = strtolower($this->mc->myPaths['targetLexicon']);
        $this->lexDir = str_replace('\\', '/', $this->lexDir);

        $this->modelDir = strtolower($this->mc->myPaths['targetModel']);
        $this->modelDir = str_replace('\\', '/', $this->modelDir);

        $this->jsDir = strtolower($this->mc->myPaths['targetJs']);
        $this->jsDir = str_replace('\\', '/', $this->jsDir);

        $this->chunkDir = strtolower($this->mc->myPaths['targetElements'] . 'chunks/');
        $this->chunkDir = str_replace('\\', '/', $this->chunkDir);

        $this->languages = array(
            'en' => array(
                'default',
                'properties',
                'forms',
            ),
        );

        $this->assertNotEmpty($this->rootDir, 'Empty Root');
        $this->assertNotEmpty($this->coreDir, 'Empty target core');
        $this->assertNotEmpty($this->lexDir, 'Empty target lex dir');
        $this->assertNotEmpty($this->modelDir, 'Empty Model dir');
        $this->assertNotEmpty($this->jsDir, 'Empty JS dir');
        $this->assertNotEmpty($this->chunkDir, 'Empty chunk dir');
    }

    protected function tearDown() {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testSetLexFiles() {
        $lcf = new LexiconCodeFile($this->modx, $this->mc->helpers,
            $this->modelDir, 'example.class.php', $this->lexDir, $this->languages);
        $language = $lcf->language;
        $this->assertNotEmpty($language);

        $lexFiles = $lcf->getLexFiles();
        $expected = array(
            $this->lexDir . $language . '/default.inc.php' => 'default.inc.php'
        );

            $this->assertNotEmpty($lexFiles);
        $this->assertEquals($expected, $lexFiles);

        $lcf->addLexfile('properties');

        $lexFiles = $lcf->getLexFiles();

        $expected = array(
            $this->lexDir . $language . '/default.inc.php' => 'default.inc.php',
            $this->lexDir . $language . '/properties.inc.php' => 'properties.inc.php'
        );
        $this->assertNotEmpty($lexFiles);
        $this->assertEquals($expected, $lexFiles);

        /* Test with no lexicon load line */
        $lcf = null;


        $lcf = new LexiconCodeFile($this->modx, $this->mc->helpers,
            $this->chunkDir, 'chunk1.chunk.html', $this->lexDir, $this->languages);
        $lexFiles = $lcf->getLexFiles();
        $expected = array(
            $this->lexDir . $language . '/default.inc.php' => 'default.inc.php',
        );
        $this->assertNotEmpty($lexFiles);
        $this->assertEquals($expected, $lexFiles);
    }

    /*public function testGetCodeFiles() {
        $lcf = new LexiconCodeFile($this->modx, $this->mc->helpers,
            $this->modelDir, 'example.class.php', $this->lexDir, $this->languages);

        $codeFiles = $lcf->getCodeFiles();
        $expected = array(
            $this->modelDir . 'example.class.php' => 'example.class.php',
        );
        $this->assertEquals($expected, $codeFiles);
        $lcf->addCodeFile($this->modelDir, 'example2.class.php');

        $expected[$this->modelDir . 'example2.class.php'] = 'example2.class.php';
        $codeFiles = $lcf->getCodeFiles();
        $this->assertEquals($expected, $codeFiles);
    }*/

    /** Test getting lex strings from php file, js file, and Tpl chunk */
    public function testSetUsed() {
        $files = array(
            $this->modelDir => 'example.class.php',
            $this->jsDir => 'example.js',
            $this->chunkDir => 'chunk1.chunk.html',
        );
        foreach ($files as $dir => $fileName) {
            $lcf = null;
            $lcf = new LexiconCodeFile($this->modx, $this->mc->helpers,
                $dir, $fileName, $this->lexDir, $this->languages);
            $lexStrings = $lcf->getUsed();
            $this->assertTrue(is_array($lexStrings));
            $this->assertNotEmpty($lexStrings);
            $this->assertTrue(array_key_exists('string1', $lexStrings));
            $this->assertTrue(array_key_exists('string2', $lexStrings));
            $this->assertTrue(array_key_exists('string3', $lexStrings));
            $this->AssertTrue($lexStrings['string1'] == 'Hello');
            $this->AssertTrue($lexStrings['string2'] == 'Goodbye');
            $this->AssertTrue($lexStrings['string3'] == '');
        }
    }

    public function testSetMissing() {
        $files = array(
            $this->modelDir => 'example.class.php',
            $this->jsDir => 'example.js',
            $this->chunkDir => 'chunk1.chunk.html',
        );
        foreach ($files as $dir => $fileName) {
            $lcf = null;
            $lcf = new LexiconCodeFile($this->modx, $this->mc->helpers,
                $dir, $fileName, $this->lexDir, $this->languages);
            $lexStrings = $lcf->getUsed();
            $missing = $lcf->getMissing();
            $toUpdate = $lcf->getToUpdate();

            $this->assertTrue(is_array($lexStrings));
            $this->assertNotEmpty($lexStrings);
            $this->assertTrue(is_array($missing));
            $this->assertNotEmpty($missing);
            $this->assertTrue(is_array($toUpdate));
            $this->assertNotEmpty($toUpdate);


            $this->assertTrue(array_key_exists('string1', $missing));
            $this->assertTrue(array_key_exists('string3', $missing));
            $this->AssertTrue($lexStrings['string1'] == 'Hello');
            $this->AssertTrue($lexStrings['string2'] == 'Goodbye');
            $this->AssertTrue($lexStrings['string3'] == '');

            $expected = array(
                'string2' => 'Goodbye',
                'string4' => 'Updated String',
            );
            if ($fileName == 'chunk1.chunk.html') {
                $this->assertEquals($expected, $toUpdate);
            }
        }
    }

    public function testUpdateLexiconFile() {
        $_lang = array();
        $path = $this->lexDir . 'en/default.inc.php';
        include $path;
        $this->assertNotEmpty($_lang);
        $expected = array(
            'string2' => 'String2 in Lexicon file',
            'string4' => 'String4 in Lexicon file',
            'unused' => 'Unused Lexicon String',
            'empty_string' => '',
        );
        $this->assertEquals($expected, $_lang);

        $files = array(
            $this->modelDir => 'example.class.php',
            $this->jsDir => 'example.js',
            $this->chunkDir => 'chunk1.chunk.html',
        );
        foreach ($files as $dir => $fileName) {
            $lcf = null;
            $lcf = new LexiconCodeFile($this->modx, $this->mc->helpers,
                $dir, $fileName, $this->lexDir, $this->languages);
            $lcf->updateLexiconFile();
            $_lang = array();
            include $path;
            $this->assertNotEmpty($_lang);
            switch ($fileName) {
                case 'example.class.php':
                    $this->assertEquals($_lang['string2'], 'Goodbye');
                    $this->assertEquals($_lang['string4'], 'String4 in Lexicon file');
                    $this->assertEquals($_lang['unused'], 'Unused Lexicon String');
                    $this->assertEquals($_lang['empty_string'], '');
                    $this->assertEquals($_lang['string1'], 'Hello');
                    $this->assertEquals($_lang['string3'], '');
                    break;
                case 'example.js':
                    break;
                case 'chunk1.chunk.html':
                    $this->assertEquals($_lang['string4'], 'Updated String');
                    $this->assertEquals($_lang['string3'], 'Updated Empty string');
                    break;
                default:
                    assertTrue(false);
            }
        }
    }
}
