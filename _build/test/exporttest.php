<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-18 at 18:52:48.
 */
include_once 'c:\xampp\htdocs\addons\assets\mycomponents\mycomponent\core\components\mycomponent\model\mycomponent\mycomponentproject.class.php';


class ExportTest extends PHPUnit_Framework_TestCase
{
    /**
     * @outputBuffering disabled
     * @var $export Export

     */
    protected $export;
    protected $exportExposed;
    protected $object;
    /* @var $utHelpers utHelpers */
    protected $utHelpers;
    /* @var $mc MyComponentProject */
    protected $mc;
    /* @var $modx modX */
    protected $modx;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.

     */
   /* public static function setUpBeforeClass() {
        require_once dirname(__FILE__) . '/build.config.php';
        require_once dirname(__FILE__) . '/uthelpers.class.php';
        require_once MODX_ASSETS_PATH . 'mycomponents/mycomponent/core/components/mycomponent/model/mycomponent/mycomponentproject.class.php';
        require_once MODX_CORE_PATH . 'model/modx/modx.class.php';
        $modx = new modX();
        $modx->initialize(('mgr'));
        $modx->getService('error', 'error.modError', '', '');
        $mc = new MyComponentProject($modx);
        $mc->init(array(), 'unittest');
        if (empty($mc->props)) {
            die('No properties');
        }

        if ($mc->props['categories']['UnitTest']['category'] != 'UnitTest') {
            session_write_close();
            die('wrong config - NEVER run unit test on a real project!');
        }
        $mc->createCategories();
        $mc->createElements();
    }*/

/*    public static function tearDownAfterClass() {
        require_once dirname(__FILE__) . '/build.config.php';
        require_once dirname(__FILE__) . '/uthelpers.class.php';


        require_once MODX_CORE_PATH . 'model/modx/modx.class.php';
        $modx = new modX();
        $mc = new MyComponentProject($modx);
        $mc->init(array(), 'unittest');
        $utHelpers = new UtHelpers();
        $utHelpers->removeElements($modx, $mc);
        $utHelpers->removeElements($modx, $mc);
        $utHelpers->removePropertySets($modx, $mc);
        $utHelpers->removePropertySets($modx, $mc);
        $utHelpers->removeSystemSettings($modx, $mc);
        $utHelpers->removeSystemSettings($modx, $mc);

        $mc = null;
        $modx = null;

    }*/

    protected function setUp()
    {
        require_once dirname(__FILE__) . '/build.config.php';
        require_once dirname(__FILE__) . '/uthelpers.class.php';
        require_once MODX_CORE_PATH . 'model/modx/modx.class.php';
        $modx = new modX();
        $modx->initialize('mgr');
        $modx->getService('error', 'error.modError', '', '');
        $this->utHelpers = new UtHelpers();
        $this->mc = new MyComponentProject($modx);
        $this->mc->init(array(), 'unittest');
        $this->mc->createCategories();
        $this->modx =& $this->mc->modx;

        if ($this->mc->props['categories']['UnitTest']['category'] != 'UnitTest') {
            die('wrong config');
        }
        if (strstr($this->mc->targetRoot, 'unittest') ){
            $this->utHelpers->rrmdir($this->mc->targetRoot);

        } else {
            die('Wrong Target Root!');
        }

        $modx->setLogLevel(modX::LOG_LEVEL_INFO);
        $modx->setLogTarget('ECHO');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->utHelpers->removeElements($this->modx, $this->mc);
        $this->utHelpers->removeResources($this->modx, $this->mc);
        $this->utHelpers->removeSystemSettings($this->modx, $this->mc);
        $this->utHelpers->removenameSpaces($this->modx, $this->mc);
        $this->utHelpers->removeCategories($this->modx, $this->mc);

        if (strstr($this->mc->targetRoot, 'unittest')) {
            $this->utHelpers->rrmdir($this->mc->targetRoot);
        } else {
            die('Not our Target Root!');
        }

        $this->mc->modx = null;
        $this->modx = null;
        $this->mc = null;
    }


    public function testInit()
    {
        $this->modx->log(MODX::LOG_LEVEL_INFO, 'Component: ' . $this->mc->props['packageName']);
        // $this->modx->log(MODX::LOG_LEVEL_INFO, 'Source: ' . $this->mc->props['source']);
        $this->modx->log(MODX::LOG_LEVEL_INFO, 'Target Root: ' . PHPUnit_Framework_Assert::readAttribute($this->mc, 'targetRoot'));
        $this->modx->log(MODx::LOG_LEVEL_INFO, 'TargetCore: ' . $this->mc->myPaths['targetCore']);
        // $this->modx->log(MODX::LOG_LEVEL_INFO, 'Target Core: ' . PHPUnit_Framework_Assert::readAttribute($this->mc, 'targetCore'));
        // $this->modx->log(MODX::LOG_LEVEL_INFO, 'Target Assets: ' . PHPUnit_Framework_Assert::readAttribute($this->mc, 'transportPath'));
        $this->assertNotEmpty($this->mc->props);
//         $this->assertNotEmpty($this->mc->props['source']);
        $this->assertTrue(method_exists($this->mc->helpers, 'replaceTags'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->mc, 'packageNameLower'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->mc, 'targetRoot'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->mc, 'dirPermission'));

/*        $this->assertInstanceOf('modCategory', PHPUnit_Framework_Assert::readAttribute($this->mc, 'categoryObj'));*/
//        $v = PHPUnit_Framework_Assert::readAttribute($this->mc, 'createObjectFiles');
 //       $this->assertTrue($v === true || $v === false || $v === '1' || $v === '0' || $v === 1 || $v === 0);
//        $v = PHPUnit_Framework_Assert::readAttribute($this->mc, 'createTransportFiles');
//        $this->assertTrue($v === true || $v === false || $v === '1' || $v === '0' || $v === 1 || $v === 0);
    }

    public function testProcessResources() {



        $this->mc->createResources();
        $this->mc->exportComponent();
        $resources = $this->mc->props['exportResources'];
        $this->assertNotEmpty($resources);
        $fileName = $this->mc->targetRoot . '_build/data/transport.resources.php';
        $this->assertFileExists($fileName);
        $this->assertNotEmpty(file_get_contents($fileName));
        $this->assertNotEmpty($resources);
        foreach($resources as $k => $resource) {
            $this->assertNotEmpty($resource);
            $fileName = $this->mc->targetRoot . '_build/data/resources/' . strtolower($resource) . '.content.html';
            $this->assertFileExists($fileName);
            $content = file_get_contents($fileName);
            $this->assertNotEmpty($content);
            $this->assertNotEmpty(strstr($content, 'Content goes here'));
        }
    }

    /**
     * @todo   Implement testProcess()
     * @dataProvider testProcessProvider()
     */
    public function testProcessElements($element) {
        /* @var $utHelpers utHelpers */
        $sources['data'] = 'c:/xampp/htdocs/assets/mycomponents/unittest/_build/data/';
        $sources['source_core'] = 'c:/xampp/htdocs/assets/mycomponents/unittest/core/';
        $this->mc->createElements();
        $this->utHelpers->createProperties($this->modx, $this->mc);
        $data = explode(':', $element);
        $toProcess = $data[0];

        // $name = substr($data[0], 0, -1);
        $name = $data[0];
        $name = $name == 'templateVar'? 'tv' : $name;
        $class = $data[1];
        $this->mc->exportComponent();

        $elements = $this->mc->props['elements'][$name];

        foreach ($elements as $elementName => $fields) {
            $this->assertNotEmpty($elementName);
            $baseDir = $this->mc->targetRoot . '_build/';
            $transportDir = $baseDir . 'data/' . strtolower($fields['category']) . '/';
            $propertiesDir = $baseDir . 'data/properties/';

            /* @var $elementObj modElement */
            $alias = $this->utHelpers->getNameAlias($class);
            $elementObj = $this->modx->getObject($class, array($alias => $elementName));
            $this->assertInstanceOf($class, $elementObj);
            $properties = $elementObj->getProperties();
            $this->assertNotEmpty($properties);
            $fileName = $toProcess == 'templateVars'? 'tvs.php' : strtolower($toProcess) . '.php';
            $transportFileName = $transportDir . 'transport.' . $fileName;
            $this->assertFileExists($transportFileName);
            $content = file_get_contents($transportFileName);
            $this->assertNotEmpty($content);

            $this->assertTrue(strstr($content, 'setProperties') !== false);
            $modx =& $this->modx;
            $objects = include $transportFileName;
            $this->assertNotEmpty($objects);
            if ($class != 'modSnippet') {
                $this->assertGreaterThan(1, count($objects));
            } else {
                $this->assertGreaterThan(0, count($objects));
            }
            $this->assertInstanceOf($class, $objects[1]);
            foreach ($objects as $object) {
                /* @var $object modElement */
                $props = $object->getProperties();
                // $this->assertEquals(4, count($props),$class);
            }
            $propName = substr($name,0,-1);
            $propName = $propName == 'templateVar'? 'tv' : $propName;
            $fileName = strtolower($elementName) . '.' . $propName . '.php';
            $this->assertFileExists($propertiesDir . 'properties.' . $fileName);
            $this->assertNotEmpty(file_get_contents($propertiesDir . 'properties.' . $fileName));
            $props = include $propertiesDir . 'properties.' . $fileName;
            $this->assertEquals(4, count($props));
        }
    }

    protected static $myData =
        array(
            array('chunks:modChunk'),
            array('snippets:modSnippet'),
            array('templates:modTemplate'),
            array('plugins:modPlugin'),
            array('templateVars:modTemplateVar'),
            array('propertySets:modPropertySet'),
        );

    public static function testProcessProvider()
    {
        return self::$myData;

    }

    public function testProcessSystemSettings() {

        $this->utHelpers->removeSystemSettings($this->modx, $this->mc);
        $this->mc->createNamespaces();
        $this->mc->createNewSystemSettings();
        $configSettings = count($this->mc->props['newSystemSettings']);
        $settings = $this->modx->getCollection('modSystemSetting', array('namespace' => 'unittest'));
        $this->assertEquals(2, count($settings));
        $this->assertEquals(2, $configSettings);
        $this->mc->exportComponent();

        $fileName = $this->mc->targetRoot . '_build/data/transport.settings.php';
        $this->assertFileExists($fileName);
        $content = file_get_contents($fileName);
        $this->assertNotEmpty($content);
        $this->assertEmpty(strstr($content, '{{+'));
        /* Need this for the include */
        $modx =& $this->modx;
        $objects = include $fileName;
        $this->assertEquals($configSettings, count($objects));
        $this->utHelpers->removeSystemSettings($this->modx, $this->mc);
    }

}
