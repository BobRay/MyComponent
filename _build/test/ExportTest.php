<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-18 at 18:52:48.
 */
include 'c:\xampp\htdocs\addons\assets\mycomponents\mycomponent\_build\utilities\export.class.php';


class ExportTest extends PHPUnit_Framework_TestCase
{
    /**
     * @outputBuffering disabled
     * @var $export Export

     */
    protected $export;
    protected $exportExposed;
    protected $object;
    protected $utHelpers;
    /* @var $bootstrap Bootstrap */
    protected $bootstrap;
    protected $modx;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.

     */
    public static function setUpBeforeClass() {
        require_once dirname(__FILE__) . '/build.config.php';
        require_once dirname(__FILE__) . '/uthelpers.class.php';
        require_once dirname(dirname(__FILE__)) . '/utilities/bootstrap.class.php';
        require_once MODX_CORE_PATH . 'model/modx/modx.class.php';
        $modx = new modX();
        $bootstrap = new Bootstrap($modx);
        $bootstrap->init(dirname(__FILE__) . '/build.config.php');
        $bootstrap->createCategory();
        $bootstrap->createElements();
    }

    public static function tearDownAfterClass() {
        require_once dirname(__FILE__) . '/build.config.php';
        require_once dirname(__FILE__) . '/uthelpers.class.php';
        require_once dirname(dirname(__FILE__)) . '/utilities/bootstrap.class.php';
        require_once MODX_CORE_PATH . 'model/modx/modx.class.php';
        $modx = new modX();
        $bootstrap = new Bootstrap($modx);
        $bootstrap->init(dirname(__FILE__) . '/build.config.php');
        $utHelpers = new UtHelpers();
        $utHelpers->removeElements($mods, $bootstrap);

    }
    protected function setUp()
    {
        require_once dirname(__FILE__) . '/build.config.php';

        //require_once MODX_CORE_PATH . 'model/modx/modx.class.php';
        $modx = new modX();
        $modx->initialize('mgr');
        $this->utHelpers = new UtHelpers();
        //$this->bootstrap = new Bootstrap($modx);
        //$this->bootstrap->init(dirname(__FILE__) . '/build.config.php');
        //$this->bootstrap->createCategory();
        require_once MODX_ASSETS_PATH . 'mycomponents/mycomponent/_build/utilities/export.class.php';
        $this->export = new Export($modx);
        $this->modx =& $this->export->modx;
        /* @var $categoryObj modCategory */
        $this->export->init(dirname(__FILE__) . '/build.config.php');
        if ($this->export->props['category'] != 'UnitTest') {
            die('wrong config');
        }


        //$this->export = new Export($modx);
        //$this->bootstrap = new Bootstrap($modx);

        $modx->setLogLevel(modX::LOG_LEVEL_INFO);
        $modx->setLogTarget('ECHO');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->export->modx = null;
    }

    /**
     * @covers Export::init
     */


    public function testInit()
    {
        $this->modx->log(MODX::LOG_LEVEL_INFO, 'Component: ' . $this->export->props['packageName']);
        $this->modx->log(MODX::LOG_LEVEL_INFO, 'Source: ' . $this->export->props['source']);
        $this->modx->log(MODX::LOG_LEVEL_INFO, 'Target Base: ' . PHPUnit_Framework_Assert::readAttribute($this->export, 'targetBase'));
        $this->modx->log(MODX::LOG_LEVEL_INFO, 'Target Core: ' . PHPUnit_Framework_Assert::readAttribute($this->export, 'targetCore'));
        $this->modx->log(MODX::LOG_LEVEL_INFO, 'Target Assets: ' . PHPUnit_Framework_Assert::readAttribute($this->export, 'transportPath'));
        $this->assertNotEmpty($this->export->props);
        $this->assertNotEmpty($this->export->props['source']);
        $this->assertTrue(method_exists($this->export->helpers, 'replaceTags'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->export, 'packageName'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->export, 'packageNameLower'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->export, 'targetBase'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->export, 'targetCore'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->export, 'dirPermission'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->export, 'category'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->export, 'categoryId'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->export, 'resourcePath'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->export, 'elementPath'));
        $this->assertNotEmpty(PHPUnit_Framework_Assert::readAttribute($this->export, 'transportPath'));

        $this->assertInstanceOf('modCategory', PHPUnit_Framework_Assert::readAttribute($this->export, 'categoryObj'));
        $v = PHPUnit_Framework_Assert::readAttribute($this->export, 'createObjectFiles');
        $this->assertTrue($v === true || $v === false || $v === '1' || $v === '0' || $v === 1 || $v === 0);
        $v = PHPUnit_Framework_Assert::readAttribute($this->export, 'createTransportFiles');
        $this->assertTrue($v === true || $v === false || $v === '1' || $v === '0' || $v === 1 || $v === 0);
    }

    /**
     * @covers Export::process
     * @todo   Implement testProcess().
     */
    public function testProcess()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Export::render_properties
     * @todo   Implement testRender_properties().
     */
    public function testRender_properties()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
