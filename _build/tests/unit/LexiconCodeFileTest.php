<?php

/**
 * Test class for MyComponentProject LexiconHelper.
 * Generated by PHPUnit on 2012-03-02 at 23:02:19.
 * @outputBuffering disabled
 */

namespace tests\unit;
use LexiconCodeFile;
use LexiconCodeFileFactory;
use LexiconHelper;
use modCategory;
use modResource;
use modX;
use MyComponentProject;
use PHPUnit_Framework_TestCase;

ob_start();

/**
 * @method assertStringContainsString(string $string, bool|string $content)
 */
class LexiconCodeFileTest extends PHPUnit_Framework_TestCase {
    /**
     * @runInSeparateProcess
     *
     */

    /* @var $mc MyComponentProject */
    public $mc;
    /* @var $modx modX */
    public $modx;
    /* @var $utHelpers UtHelpers */
    public $utHelpers;
    /* @var $lcf LexiconCodeFile;
     * */
    public $lcf;
    /**
     * @var $root string - target root
     */
    public $targetRoot;
    /**
     * @var $targetLexDir string - target lexicon directory
     */
    public $targetLexDir;
    /**
     * @var $targetCore string - target core directory
     */
    public $targetCore;
    /**
     * @var $targetModelDir string - target model directory
     */
    public $targetModelDir;

    /**
     * @var $targetJsDir string - target JS directory
     */
    public $targetJsDir;

    /**
     * @var $targetChunkDir string - target chunks directory
     */
    public $targetChunkDir;
    /**
     * @var $dataDir string - directory with mock files to copy
     */
    public $dataDir;

    /**
     * @var $targetPropertiesDir string - target properties dir
     */
    public $targetPropertiesDir;

    /** @var  $languages array */
    public $languages;

    /** @var  $targetDataDir string */
    public $targetDataDir;

    /** @var  $factory LexiconCodeFileFactory */
    public $factory;


    protected function setUp(): void {
       //  $this::markTestSkipped("PHP option `assert.exception` must be enabled for this test");
        require_once 'build.config.php';
        require_once 'uthelpers.class.php';
        require_once MODX_CORE_PATH . 'model/modx/modx.class.php';
        $this->utHelpers = new UtHelpers();
        $modx = new modX();
        $this->modx =& $modx;
        $modx->initialize('mgr');
        $isMODX3 = $modx->getVersionData()['version'] >= 3;
        if ($isMODX3) {
            if (!$modx->error) {
                if (!$modx->services->has('error')) {
                    $this->services->add('error', new MODX\Revolution\Error\modError($modx));
                    $modx->error = $modx->services->get('error');
                }
            }
        } else {
            $modx->getService('error', 'error.modError', '', '');
        }
        $modx->getService('lexicon', 'modLexicon');
        $modx->getRequest();
        $homeId = $modx->getOption('site_start');
        $homeResource = $modx->getObject('modResource', $homeId);

        if ($homeResource instanceof modResource) {
            $modx->resource = $homeResource;
        } else {
            echo "\nNo Resource\n";
        }

        $modx->setLogLevel(modX::LOG_LEVEL_ERROR);
        $modx->setLogTarget('ECHO');

        require_once MODX_ASSETS_PATH . 'mycomponents/mycomponent/core/components/mycomponent/model/mycomponent/mycomponentproject.class.php';
        require_once MODX_ASSETS_PATH . 'mycomponents/mycomponent/core/components/mycomponent/model/mycomponent/lexiconcodefile.class.php';

        /* @var $categoryObj modCategory */
        $this->mc = new MyComponentProject($modx);
        $this->mc->init(array(), 'unittest');
        $this->dataDir = dirname(__FILE__) . '/data/';
        $this->dataDir = str_replace('\\', '/', $this->dataDir);


        $this->targetRoot = dirname(dirname(dirname(dirname(__FILE__)))) . '/unittest/';
        $this->targetRoot = str_replace('\\', '/', $this->targetRoot);
        $this->targetRoot = strtolower($this->targetRoot);
        $this->utHelpers->rrmdir($this->targetRoot);
        @mkdir($this->targetRoot, '0644', true);

        $this->targetCore = $this->targetRoot . 'core/components/unittest/';
        @mkdir($this->targetCore, '0644', true);
        $this->targetCore = str_replace('\\', '/', $this->targetCore);

        $this->targetLexDir = $this->targetCore . 'lexicon/';
        $this->targetLexDir = str_replace('\\', '/', $this->targetLexDir);
        @mkdir($this->targetLexDir . 'en', '0644', true);
        copy($this->dataDir . 'default.inc.php',
            $this->targetLexDir . 'en/default.inc.php');
        copy($this->dataDir . 'chunks.inc.php',
            $this->targetLexDir . 'en/chunks.inc.php');
        copy($this->dataDir . 'properties.inc.php',
            $this->targetLexDir . 'en/properties.inc.php');

        $this->targetModelDir = $this->targetCore . 'model/';
        $this->targetModelDir = str_replace('\\', '/', $this->targetModelDir);
        @mkdir($this->targetModelDir, '0644', true);
        copy($this->dataDir . 'example.class.php',
            $this->targetModelDir . 'example.class.php');

        $this->targetDataDir = $this->targetRoot . '_build/data/';
        $this->targetDataDir = str_replace('\\', '/', $this->targetDataDir);
        @mkdir($this->targetDataDir, '0644', true);
        copy($this->dataDir . 'transport.menus.php',
            $this->targetDataDir . 'transport.menus.php');
        copy($this->dataDir . 'transport.settings.php',
            $this->targetDataDir . 'transport.settings.php');

        $this->targetJsDir = $this->targetRoot . 'assets/components/unittest/js/';
        $this->targetJsDir = str_replace('\\', '/', $this->targetJsDir);
        @mkdir($this->targetJsDir, '0644', true);
        copy($this->dataDir . 'example.js',
            $this->targetJsDir . 'example.js');

        $this->targetChunkDir = $this->targetCore . 'elements/chunks/';
        $this->targetChunkDir = str_replace('\\', '/', $this->targetChunkDir);
        @mkdir($this->targetChunkDir, '0644', true);
        copy($this->dataDir . 'chunk1.chunk.html',
            $this->targetChunkDir . 'chunk1.chunk.html');

        $this->targetPropertiesDir = $this->targetRoot . '_build/data/properties/';
        $this->targetPropertiesDir = str_replace('\\', '/', $this->targetPropertiesDir);
        @mkdir($this->targetPropertiesDir, '0644', true);
        copy($this->dataDir . 'properties.propertyset1.propertyset.php',
            $this->targetPropertiesDir . 'properties.propertyset1.propertyset.php');
        copy($this->dataDir . 'properties.snippet1.snippet.php',
            $this->targetPropertiesDir . 'properties.snippet1.snippet.php');

        $this->languages = array(
            'en' => array(
                'default',
                'properties',
                'forms',
            ),
        );

        $this->assertNotEmpty($this->targetRoot, 'Empty Root');
        $this->assertNotEmpty($this->targetCore, 'Empty target core');
        $this->assertNotEmpty($this->targetLexDir, 'Empty target lex dir');
        $this->assertNotEmpty($this->targetModelDir, 'Empty Model dir');
        $this->assertNotEmpty($this->targetJsDir, 'Empty JS dir');
        $this->assertNotEmpty($this->targetChunkDir, 'Empty chunk dir');

        $menuObjects = $this->modx->getCollection('modMenu', array('namespace' => 'unittest'));
        foreach ($menuObjects as $menuObject) {
           $success =  $menuObject->remove();
        }
        $widgetObjects = $this->modx->getCollection('modDashboardWidget', array('namespace' => 'unittest'));
        foreach ($widgetObjects as $widgetObject) {
            $success = $widgetObject->remove();
        }
    }

    protected function tearDown():void {
        $this->utHelpers->rrmdir($this->targetRoot);
    }

    public function testSetup() {
        $lcf = null;
        $lcf = LexiconCodeFileFactory::getInstance($this->modx, $this->mc->helpers,
            $this->targetModelDir, 'example.class.php', $this->targetLexDir, $this->languages);
        $this->assertTrue($lcf instanceof LexiconCodeFile);
        $this->assertFalse($lcf->hasError());

        /* test with bad file name */
        $lcf = null;
        $lcf = LexiconCodeFileFactory::getInstance($this->modx, $this->mc->helpers,
            $this->targetModelDir, 'xx.class.php', $this->targetLexDir, $this->languages);
        $this->assertTrue($lcf instanceof LexiconCodeFile);
        $e = $lcf->getErrors();
        $m = implode(', ', $e);
        $this->assertNotEmpty($lcf->hasError(), $m);
    }

    public function testSetLexFiles() {
        $lcf = LexiconCodeFileFactory::getInstance($this->modx, $this->mc->helpers,
            $this->targetModelDir, 'example.class.php', $this->targetLexDir, $this->languages);
        $language = $lcf->language;
        $this->assertNotEmpty($language);

        $lexFiles = $lcf->lexFiles;
        $this->assertEmpty($lcf->hasError());
        $expected = array(
            'default.inc.php' => $this->targetLexDir . $language . '/default.inc.php',
        );

        $this->assertNotEmpty($lexFiles);
        $this->assertEquals($expected, $lexFiles);

        $lcf->addLexfile('properties');

        $lexFiles = $lcf->lexFiles;
        $this->assertEmpty($lcf->hasError());
        $expected = array(
            'default.inc.php' => $this->targetLexDir . $language . '/default.inc.php',
            'properties.inc.php' => $this->targetLexDir . $language . '/properties.inc.php',
        );
        $this->assertNotEmpty($lexFiles);
        $this->assertEquals($expected, $lexFiles);

        /* Test with no lexicon load line */
        $lcf = null;
        $lcf = LexiconCodeFileFactory::getInstance($this->modx, $this->mc->helpers,
            $this->targetChunkDir, 'chunk1.chunk.html', $this->targetLexDir, $this->languages);
        $lexFiles = $lcf->lexFiles;
        $this->assertEmpty($lcf->hasError());
        $expected = array(
            'chunks.inc.php' => $this->targetLexDir . $language . '/chunks.inc.php',
        );
        $this->assertNotEmpty($lexFiles);
        $this->assertEquals($expected, $lexFiles);

        /* Test with properties file */
        $lcf = null;
        $lcf = LexiconCodeFileFactory::getInstance($this->modx, $this->mc->helpers,
            $this->targetPropertiesDir, 'properties.snippet1.snippet.php', $this->targetLexDir, $this->languages);
        $lexFiles = $lcf->lexFiles;
        $expected = array(
            'properties.inc.php' => $this->targetLexDir . $language . '/properties.inc.php',
        );
        $this->assertNotEmpty($lexFiles);
        $this->assertEquals($expected, $lexFiles);

        /* Test with menus */
        $lcf = null;
        $lcf = LexiconCodeFileFactory::getInstance($this->modx, $this->mc->helpers,
            $this->targetDataDir, 'transport.menus.php', $this->targetLexDir, $this->languages);
        $lexFiles = $lcf->lexFiles;
        $expected = array(
            'default.inc.php' => $this->targetLexDir . $language . '/default.inc.php',
        );
        $this->assertNotEmpty($lexFiles);
        $this->assertEquals($expected, $lexFiles);

        /* Test with settings */
        $lcf = null;
        $lcf = LexiconCodeFileFactory::getInstance($this->modx, $this->mc->helpers,
            $this->targetDataDir, 'transport.settings.php', $this->targetLexDir, $this->languages);
        $lexFiles = $lcf->lexFiles;
        $expected = array(
            'default.inc.php' => $this->targetLexDir . $language . '/default.inc.php',
        );
        $this->assertNotEmpty($lexFiles);
        $this->assertEquals($expected, $lexFiles);
    }

    /** Test getting lex strings from php file, js file, and Tpl chunk */
    public function testSetUsed() {

        $files = array(
            $this->targetModelDir => 'example.class.php',
            $this->targetJsDir => 'example.js',
            $this->targetChunkDir => 'chunk1.chunk.html',
            $this->targetPropertiesDir => 'properties.propertyset1.propertyset.php',
            $this->targetPropertiesDir => 'properties.snippet1.snippet.php',
            $this->targetDataDir => 'transport.menus.php',
            $this->targetDataDir => 'transport.settings.php',
        );
        foreach ($files as $dir => $fileName) {
            $lcf = null;
            if ($fileName == 'chunk1.chunk.html') {
                $x = 1;
            }
            $this->assertFileExists($dir . $fileName);
            $lcf = LexiconCodeFileFactory::getInstance($this->modx, $this->mc->helpers,
                $dir, $fileName, $this->targetLexDir, $this->languages);
            $lexStrings = $lcf->used;
            $this->assertEmpty($lcf->hasError(), $fileName);
            $this->assertTrue(is_array($lexStrings));
            $this->assertNotEmpty($lexStrings, $fileName);
            if ($fileName == 'transport.settings.php') {
                $this->assertTrue(array_key_exists('setting_setting_one', $lexStrings), $fileName);
                $this->assertTrue(array_key_exists('setting_setting_one_desc', $lexStrings), $fileName);
                $this->assertTrue(array_key_exists('setting_setting_two', $lexStrings), $fileName);
                $this->assertTrue(array_key_exists('setting_setting_two_desc', $lexStrings), $fileName);
                $this->assertTrue(array_key_exists('setting_setting_three', $lexStrings), $fileName);
                $this->assertTrue(array_key_exists('setting_setting_three_desc', $lexStrings), $fileName);
                $this->assertEquals("Hello 'columbus'", $lexStrings['setting_setting_one_desc'], $fileName);
                $this->assertEquals('Hello "columbus"', $lexStrings['setting_setting_two_desc'], $fileName);
            } elseif (strpos($fileName, 'properties') !== false) {
                $this->assertTrue(array_key_exists('string1', $lexStrings), $fileName);
                $this->assertTrue(array_key_exists('string2', $lexStrings), $fileName);
                $this->assertEquals("Hello 'columbus'", $lexStrings['string1'], $fileName);
                $this->assertEquals('Hello "columbus"', $lexStrings['string2'], $fileName);
            } elseif (strpos($fileName, 'menus') !== false) {
                $this->assertTrue(array_key_exists('string1', $lexStrings), $fileName);
                $this->assertTrue(array_key_exists('string2', $lexStrings), $fileName);
                $this->assertEquals("Hello 'columbus'", $lexStrings['string1'], $fileName);
                $this->assertEquals('Hello "columbus"', $lexStrings['string2'], $fileName);
            } else {
                $this->assertTrue(array_key_exists('string1', $lexStrings), $fileName);
                $this->assertTrue(array_key_exists('string2', $lexStrings), $fileName);
                $this->assertTrue(array_key_exists('string3', $lexStrings), $fileName);
                $this->assertEquals("Hello 'columbus'", $lexStrings['string1'], $fileName);
                $this->assertEquals('Hello "columbus"', $lexStrings['string2'], $fileName);
            }
        }
    }

    public function testSetMissing() {

        $files = array(
            1 => $this->targetModelDir . '#' . 'example.class.php',
            2 => $this->targetJsDir . '#' . 'example.js',
            3 => $this->targetChunkDir . '#' . 'chunk1.chunk.html',
            4 => $this->targetPropertiesDir . '#' . 'properties.propertyset1.propertyset.php',
            5 => $this->targetPropertiesDir . '#' . 'properties.snippet1.snippet.php',
            6 => $this->targetDataDir . '#' . 'transport.menus.php',
            7 => $this->targetDataDir . '#' . 'transport.settings.php',
        );
        foreach ($files as $dir => $fileName) {
            $couple = explode('#', $fileName);
            $dir = $couple[0];
            $fileName = $couple[1];
            $lcf = null;
            $this->assertFileExists($dir . $fileName);
            $lcf = LexiconCodeFileFactory::getInstance($this->modx, $this->mc->helpers,
                $dir, $fileName, $this->targetLexDir, $this->languages);
            $lexStrings = $lcf->used;
            $missing = $lcf->missing;
            $toUpdate = $lcf->toUpdate;
            $this->assertEmpty($lcf->hasError());
            $this->assertTrue(is_array($lexStrings));
            $this->assertNotEmpty($lexStrings, $fileName);
            $this->assertTrue(is_array($missing));
            $this->assertNotEmpty($missing);
            $this->assertTrue(is_array($toUpdate));

            if ($fileName == 'example.class.php') {
                $this->assertNotEmpty($toUpdate);
            }

            if ($fileName == 'transport.settings.php') {
                $this->assertTrue(array_key_exists('setting_setting_one', $missing), $fileName);
                $this->assertTrue(array_key_exists('setting_setting_one_desc', $missing), $fileName);
                $this->assertTrue(array_key_exists('setting_setting_two', $missing), $fileName);
                $this->assertTrue(array_key_exists('setting_setting_two_desc', $missing), $fileName);
                $this->assertTrue(array_key_exists('setting_setting_three', $missing), $fileName);
                $this->assertTrue(array_key_exists('setting_setting_three_desc', $missing), $fileName);
                $this->assertEquals("Hello 'columbus'", $missing['setting_setting_one_desc'], $fileName);
                $this->assertEquals('Hello "columbus"', $missing['setting_setting_two_desc'], $fileName);
            } elseif (strpos($fileName, 'properties') !== false) {


            } else {
                if (strpos($fileName, 'menus') !== false) {
                    $this->assertTrue(array_key_exists('string21', $missing), $fileName);
                    $this->assertTrue(array_key_exists('string22', $missing), $fileName);
                    $this->assertTrue(array_key_exists('string23', $missing), $fileName);
                    $this->assertEquals("Hello 'columbus'", $missing['string21'], $fileName);
                    $this->assertEquals('Hello "columbus"', $missing['string22'], $fileName);
                    $this->assertEquals('', $missing['string23'], $fileName);
                } else {
                    $this->assertTrue(array_key_exists('string1', $missing), $fileName);
                    $this->assertTrue(array_key_exists('string3', $missing), $fileName);
                    $this->assertEquals("Hello 'columbus'", $lexStrings['string1'], $fileName);
                    $this->assertEquals('Hello "columbus"', $lexStrings['string2'], $fileName);
                }
            }

            $expected = array(
                'string2' => 'Hello "columbus"',
                'string4' => 'Hello \\\'columbus\\\'',
            );
            if ($fileName == 'example.class.php') {
                $this->assertEquals($expected, $toUpdate, $fileName);
            }
        }
    }

    public function testUpdateLexiconFile() {
        $_lang = array();
        $expected = array(
            'string2' => 'String2 in Lexicon file',
            'string4' => 'String4 in Lexicon file',
            'unused' => 'Unused Lexicon String',
            'empty_string' => '',
        );

        $files = array(
            1 => $this->targetModelDir . '#' . 'example.class.php',
            2 => $this->targetJsDir . '#' . 'example.js',
            3 => $this->targetChunkDir . '#' . 'chunk1.chunk.html',
            4 => $this->targetPropertiesDir . '#' . 'properties.propertyset1.propertyset.php',
            5 => $this->targetPropertiesDir . '#' . 'properties.snippet1.snippet.php',
            6 => $this->targetDataDir . '#' . 'transport.menus.php',
            7 => $this->targetDataDir . '#' . 'transport.settings.php',
        );
        foreach ($files as $s => $fileName) {
            $couple = explode('#', $fileName);
            $dir = $couple[0];
            $fileName = $couple[1];
           // $dir = rtrim($dir, '/');
            $lcf = null;
            $this->assertFileExists($dir . $fileName);
            $lcf = LexiconCodeFileFactory::getInstance($this->modx, $this->mc->helpers,
                $dir, $fileName, $this->targetLexDir, $this->languages);
            $lcf->updateLexiconFile();
            $this->assertEmpty($lcf->hasError(), print_r($lcf->getErrors(), true));
            $path = reset($lcf->lexFiles);
            $_lang = array();
            include $path;
            $this->assertNotEmpty($_lang);
            switch ($fileName) {
                case 'example.class.php':
                    $this->assertFalse(!strpos($path, 'default.inc.php'));
                    $this->assertEquals('Hello "columbus"', $_lang['string2']);
                    $this->assertEquals('Hello \'columbus\'', $_lang['string4']);
                    $this->assertEquals('Unused Lexicon String', $_lang['unused']);
                    $this->assertEquals('', $_lang['empty_string']);
                    $this->assertEquals('Hello \'columbus\'', $_lang['string1']);
                    $this->assertEquals('', $_lang['string3']);
                    break;
                case 'example.js':
                    $this->assertFalse(!strpos($path, 'default.inc.php'));

                    $this->assertEquals('Hello \'columbus\'', $_lang['string1']);
                    $this->assertEquals('Hello "columbus"', $_lang['string2']);
                    break;
                case 'chunk1.chunk.html':
                    $this->assertFalse(!strpos($path, 'chunks.inc.php'));
                    $this->assertEquals('Updated String', $_lang['string4']);
                    $this->assertEquals('Updated Empty string', $_lang['string3']);
                    break;
                case 'properties.propertyset1.propertyset.php':
                    $this->assertFalse(!strpos($path, 'properties.inc.php'));
                    $this->assertEquals('Hello \'columbus\'', $_lang['string1']);
                    $this->assertEquals('Hello "columbus"', $_lang['string2']);
                    $this->assertEquals('This is description 3', $_lang['string3']);
                    break;

                case 'properties.snippet1.snippet.php':
                    $this->assertFalse(!strpos($path, 'properties.inc.php'));
                    $this->assertEquals('Hello \'columbus\'', $_lang['string1'], $fileName);
                    $this->assertEquals('Hello "columbus"', $_lang['string2'], $fileName);
                    $this->assertEquals('This is the newest description', $_lang['string41']);
                    $this->assertEquals('This is the even newer description', $_lang['string42']);
                    $this->assertArrayHasKey('Description8', $_lang);
                    $this->assertEquals('', $_lang['Description8']);
                    break;

                case 'transport.menus.php':
                    $this->assertFalse(!strpos($path, 'default.inc.php'));
                    $this->assertEquals('Hello \'columbus\'', $_lang['string1'], $fileName);
                    $this->assertEquals('Hello "columbus"', $_lang['string2'], $fileName);
                    break;

                case 'transport.settings.php':
                    $this->assertFalse(!strpos($path, 'default.inc.php'));
                    $this->assertEquals('Hello \'columbus\'', $_lang['string1'], $fileName);
                    $this->assertEquals('Hello "columbus"', $_lang['string2'], $fileName);
                    break;

                default:
                    $this->assertTrue(false);
            }
        }
    }

    public function testUpdateCodeFile() {
        $files = array(
            $this->targetModelDir => 'example.class.php',
            $this->targetJsDir => 'example.js',
            $this->targetChunkDir => 'chunk1.chunk.html',
            $this->targetPropertiesDir => 'properties.propertyset1.propertyset.php',
            $this->targetPropertiesDir => 'properties.snippet1.snippet.php',
            $this->targetDataDir => 'transport.menus.php',
        );
        foreach ($files as $dir => $fileName) {
            $lcf = null;
            $this->assertFileExists($dir . $fileName);
            $lcf = LexiconCodeFileFactory::getInstance($this->modx, $this->mc->helpers,
                $dir, $fileName, $this->targetLexDir, $this->languages);
            $updated = $lcf->updateCodeFile();
            $this->assertEmpty($lcf->hasError());
            $content = file_get_contents($dir . '/' . $fileName);
            $this->assertNotEmpty($content, 'File content is empty');

            if ($fileName == 'example.class.php') {
                $this->assertTrue(strpos($content, '~~') === false, '~~ found', $fileName);
                $this->assertStringContainsString('$x = $this->modx->lexicon("string1")', $content);
                $this->assertStringContainsString('$y = $this->modx->lexicon(\'string2\')', $content);
                $this->assertStringContainsString('$z = $this->modx->lexicon(\'string3\')', $content);
            }
            if ($fileName == 'chunk1.chunk.html') {
                $this->assertTrue(strpos($content, '~~') === false, '~~ found', $fileName);
                $this->assertStringContainsString('[[%string1]]', $content);
                $this->assertStringContainsString('[[%string2]]', $content);
                $this->assertStringContainsString('[[%string3]]', $content);
            }
            if ($fileName == 'example.js') {
                $this->assertTrue(strpos($content, '~~') === false, '~~ found', $fileName);
                $this->assertStringContainsString('x = _("string1")', $content);
                $this->assertStringContainsString('y = _(\'string2\')', $content);
                $this->assertStringContainsString('z = _(\'string3\')', $content);
            }
            if ($fileName == 'properties.propertyset1.propertyset.php') {
                $this->assertTrue(strpos($content, '~~') === false, '~~ found', $fileName);
                $this->assertStringContainsString("'desc' => \"string1\"", $content);
                $this->assertStringContainsString("'desc' => 'string2'", $content);
                $this->assertStringContainsString("'desc' => 'string3'", $content);
            }

            if ($fileName == 'transport.menus.php') {
                $this->assertTrue(strpos($content, '~~') === false, '~~ found', $fileName);
                $this->assertStringContainsString("'description' => \"string21\"", $content);
                $this->assertStringContainsString("'description' => 'string22'", $content);
                $this->assertStringContainsString("'description' => 'string23'", $content);
            }

            if ($fileName == 'transport.settings.php') {
                $this->assertTrue(strpos($content, '~~') === false, '~~ found', $fileName);
                $this->assertStringContainsString("'key' => \"string1\"", $content);
                $this->assertStringContainsString("'key' => 'string2'", $content);
                $this->assertStringContainsString("'key' => 'string3'", $content);
            }
        }
    }

    public function xtestEverything() {
        $this->utHelpers->rrmdir($this->targetLexDir);
        $lexHelper = new LexiconHelper($this->modx);
        $lexHelper->init(array(), 'unittest');
        $lexHelper->run();
        $this->assertNotEmpty($lexHelper->props, 'LexHelper->props is empty');
        $this->assertEquals('unittest', $lexHelper->packageNameLower);
        $this->assertEquals('en', $lexHelper->primaryLanguage);
        $this->assertEquals($this->targetLexDir, $lexHelper->targetLexDir);
        $this->assertEquals($this->targetDataDir, $lexHelper->targetData);

        $file = $this->targetLexDir . 'en/' . 'chunks.inc.php';
        $this->assertFileExists($file);
        $content = file_get_contents($file);

        $this->assertStringContainsString('$_lang[\'string1\'] = \'Hello \\\'columbus\\\'', $content);
        $this->assertStringContainsString("\$_lang['string2'] = 'Hello \"columbus\"'", $content);
        $this->assertStringContainsString("\$_lang['string3'] = 'Updated Empty string'", $content);
        $this->assertStringContainsString("\$_lang['string4'] = 'Updated String'", $content);
        $this->assertStringContainsString("\$_lang['string14'] = 'String in Chunk'", $content);
        $this->assertStringContainsString("\$_lang['string15'] = 'Hello \"Columbus\"'", $content);
    }

    public function testUpdateObjects() {

        $configFile = 'C:\xampp\htdocs\addons\assets\mycomponents\mycomponent\_build\config\unittest.config.php';
        $this::assertTrue(file_exists($configFile));

        require_once $this->modx->getOption('mc.core_path', null, $this->modx->getOption('core_path') . 'components/mycomponent/') . 'model/mycomponent/mycomponentproject.class.php';

        $this->modx->lexicon->load('mycomponent:default');

        $project = new MyComponentProject($this->modx);
        $this->mc->init(array(), 'unittest');
        $this->mc->createMenus();
        $this->mc->createWidgets();
        $namespace = 'unittest';

        $menus = $this->modx->getCollection('modMenu', array('namespace' => $namespace));

        $this::assertNotEmpty($menus);

        foreach($menus as $menu) {
            $name = $menu->get('text');
            $this::assertNotEmpty('text');
            $this::assertStringContainsString('~~', $name);
            $description = $menu->get('description');
            $this::assertStringContainsString('~~', $description);
        }

        $this->mc->createWidgets();
        $widgets = $this->modx->getCollection('modDashboardWidget', array('namespace' => $namespace ));
        $this::assertNotEmpty($widgets);

        foreach ($widgets as $widget) {
            $name = $widget->get('name');
            $this::assertNotEmpty('name');
            $this::assertStringContainsString('~~', $name);
            $description = $widget->get('description');
            $this::assertStringContainsString('~~', $description);
        }

        $lh = new LexiconHelper($this->modx);

        $updateObjects = array('menus' => true, 'widgets' => true);

        $lh->updateObjects($updateObjects, array('unittest' => 'unittest'));

        $menus = $this->modx->getCollection('modMenu', array('namespace' => $namespace), false);

        foreach ($menus as $menu) {
            $name = $menu->get('text');
            $this::assertNotEmpty('text');
            $this::assertStringNotContainsString('~~', $name);
            $description = $menu->get('description');
            $this::assertStringNotContainsString('~~', $description);
        }
        $menuObjects = $this->modx->getCollection('modMenu', array('namespace' => 'unittest'));
        foreach ($menuObjects as $menuObject) {
            $success = $menuObject->remove();
        }
        $widgetObjects = $this->modx->getCollection('modDashboardWidget', array('namespace' => 'unittest'));
        foreach ($widgetObjects as $widgetObject) {
            $success = $widgetObject->remove();
        }

        $this->modx->getOption('xxx');
    }
}
